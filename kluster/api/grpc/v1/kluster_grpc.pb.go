// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/grpc/v1/kluster.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Kluster_CreateNamespace_FullMethodName   = "/ultary.kluster.v1.Kluster/CreateNamespace"
	Kluster_SyncOpenTelemetry_FullMethodName = "/ultary.kluster.v1.Kluster/SyncOpenTelemetry"
)

// KlusterClient is the client API for Kluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KlusterClient interface {
	CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error)
	SyncOpenTelemetry(ctx context.Context, in *SyncOpenTelemetryRequest, opts ...grpc.CallOption) (*SyncOpenTelemetryResponse, error)
}

type klusterClient struct {
	cc grpc.ClientConnInterface
}

func NewKlusterClient(cc grpc.ClientConnInterface) KlusterClient {
	return &klusterClient{cc}
}

func (c *klusterClient) CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNamespaceResponse)
	err := c.cc.Invoke(ctx, Kluster_CreateNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *klusterClient) SyncOpenTelemetry(ctx context.Context, in *SyncOpenTelemetryRequest, opts ...grpc.CallOption) (*SyncOpenTelemetryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncOpenTelemetryResponse)
	err := c.cc.Invoke(ctx, Kluster_SyncOpenTelemetry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KlusterServer is the server API for Kluster service.
// All implementations must embed UnimplementedKlusterServer
// for forward compatibility.
type KlusterServer interface {
	CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error)
	SyncOpenTelemetry(context.Context, *SyncOpenTelemetryRequest) (*SyncOpenTelemetryResponse, error)
	mustEmbedUnimplementedKlusterServer()
}

// UnimplementedKlusterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKlusterServer struct{}

func (UnimplementedKlusterServer) CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (UnimplementedKlusterServer) SyncOpenTelemetry(context.Context, *SyncOpenTelemetryRequest) (*SyncOpenTelemetryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncOpenTelemetry not implemented")
}
func (UnimplementedKlusterServer) mustEmbedUnimplementedKlusterServer() {}
func (UnimplementedKlusterServer) testEmbeddedByValue()                 {}

// UnsafeKlusterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KlusterServer will
// result in compilation errors.
type UnsafeKlusterServer interface {
	mustEmbedUnimplementedKlusterServer()
}

func RegisterKlusterServer(s grpc.ServiceRegistrar, srv KlusterServer) {
	// If the following call pancis, it indicates UnimplementedKlusterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Kluster_ServiceDesc, srv)
}

func _Kluster_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KlusterServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kluster_CreateNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KlusterServer).CreateNamespace(ctx, req.(*CreateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kluster_SyncOpenTelemetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncOpenTelemetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KlusterServer).SyncOpenTelemetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Kluster_SyncOpenTelemetry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KlusterServer).SyncOpenTelemetry(ctx, req.(*SyncOpenTelemetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Kluster_ServiceDesc is the grpc.ServiceDesc for Kluster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Kluster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ultary.kluster.v1.Kluster",
	HandlerType: (*KlusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNamespace",
			Handler:    _Kluster_CreateNamespace_Handler,
		},
		{
			MethodName: "SyncOpenTelemetry",
			Handler:    _Kluster_SyncOpenTelemetry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/v1/kluster.proto",
}
