// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/grpc/v1/system.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	System_Ping_FullMethodName                          = "/dokevy.v1.System/Ping"
	System_EnableOpenTelemetryCollector_FullMethodName  = "/dokevy.v1.System/EnableOpenTelemetryCollector"
	System_DisableOpenTelemetryCollector_FullMethodName = "/dokevy.v1.System/DisableOpenTelemetryCollector"
	System_UpdateOpenTelemetryCollector_FullMethodName  = "/dokevy.v1.System/UpdateOpenTelemetryCollector"
)

// SystemClient is the client API for System service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Pong, error)
	EnableOpenTelemetryCollector(ctx context.Context, in *EnableOpenTelemetryCollectorRequest, opts ...grpc.CallOption) (*EnableOpenTelemetryCollectorResponse, error)
	DisableOpenTelemetryCollector(ctx context.Context, in *DisableOpenTelemetryCollectorRequest, opts ...grpc.CallOption) (*DisableOpenTelemetryCollectorResponse, error)
	UpdateOpenTelemetryCollector(ctx context.Context, in *UpdateOpenTelemetryCollectorRequest, opts ...grpc.CallOption) (*UpdateOpenTelemetryCollectorResponse, error)
}

type systemClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemClient(cc grpc.ClientConnInterface) SystemClient {
	return &systemClient{cc}
}

func (c *systemClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Pong, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Pong)
	err := c.cc.Invoke(ctx, System_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) EnableOpenTelemetryCollector(ctx context.Context, in *EnableOpenTelemetryCollectorRequest, opts ...grpc.CallOption) (*EnableOpenTelemetryCollectorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableOpenTelemetryCollectorResponse)
	err := c.cc.Invoke(ctx, System_EnableOpenTelemetryCollector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) DisableOpenTelemetryCollector(ctx context.Context, in *DisableOpenTelemetryCollectorRequest, opts ...grpc.CallOption) (*DisableOpenTelemetryCollectorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableOpenTelemetryCollectorResponse)
	err := c.cc.Invoke(ctx, System_DisableOpenTelemetryCollector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdateOpenTelemetryCollector(ctx context.Context, in *UpdateOpenTelemetryCollectorRequest, opts ...grpc.CallOption) (*UpdateOpenTelemetryCollectorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOpenTelemetryCollectorResponse)
	err := c.cc.Invoke(ctx, System_UpdateOpenTelemetryCollector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemServer is the server API for System service.
// All implementations must embed UnimplementedSystemServer
// for forward compatibility.
type SystemServer interface {
	Ping(context.Context, *emptypb.Empty) (*Pong, error)
	EnableOpenTelemetryCollector(context.Context, *EnableOpenTelemetryCollectorRequest) (*EnableOpenTelemetryCollectorResponse, error)
	DisableOpenTelemetryCollector(context.Context, *DisableOpenTelemetryCollectorRequest) (*DisableOpenTelemetryCollectorResponse, error)
	UpdateOpenTelemetryCollector(context.Context, *UpdateOpenTelemetryCollectorRequest) (*UpdateOpenTelemetryCollectorResponse, error)
	mustEmbedUnimplementedSystemServer()
}

// UnimplementedSystemServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSystemServer struct{}

func (UnimplementedSystemServer) Ping(context.Context, *emptypb.Empty) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSystemServer) EnableOpenTelemetryCollector(context.Context, *EnableOpenTelemetryCollectorRequest) (*EnableOpenTelemetryCollectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableOpenTelemetryCollector not implemented")
}
func (UnimplementedSystemServer) DisableOpenTelemetryCollector(context.Context, *DisableOpenTelemetryCollectorRequest) (*DisableOpenTelemetryCollectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableOpenTelemetryCollector not implemented")
}
func (UnimplementedSystemServer) UpdateOpenTelemetryCollector(context.Context, *UpdateOpenTelemetryCollectorRequest) (*UpdateOpenTelemetryCollectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOpenTelemetryCollector not implemented")
}
func (UnimplementedSystemServer) mustEmbedUnimplementedSystemServer() {}
func (UnimplementedSystemServer) testEmbeddedByValue()                {}

// UnsafeSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemServer will
// result in compilation errors.
type UnsafeSystemServer interface {
	mustEmbedUnimplementedSystemServer()
}

func RegisterSystemServer(s grpc.ServiceRegistrar, srv SystemServer) {
	// If the following call pancis, it indicates UnimplementedSystemServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&System_ServiceDesc, srv)
}

func _System_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_EnableOpenTelemetryCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableOpenTelemetryCollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).EnableOpenTelemetryCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_EnableOpenTelemetryCollector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).EnableOpenTelemetryCollector(ctx, req.(*EnableOpenTelemetryCollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_DisableOpenTelemetryCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableOpenTelemetryCollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).DisableOpenTelemetryCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_DisableOpenTelemetryCollector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).DisableOpenTelemetryCollector(ctx, req.(*DisableOpenTelemetryCollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdateOpenTelemetryCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOpenTelemetryCollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateOpenTelemetryCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_UpdateOpenTelemetryCollector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateOpenTelemetryCollector(ctx, req.(*UpdateOpenTelemetryCollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// System_ServiceDesc is the grpc.ServiceDesc for System service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var System_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dokevy.v1.System",
	HandlerType: (*SystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _System_Ping_Handler,
		},
		{
			MethodName: "EnableOpenTelemetryCollector",
			Handler:    _System_EnableOpenTelemetryCollector_Handler,
		},
		{
			MethodName: "DisableOpenTelemetryCollector",
			Handler:    _System_DisableOpenTelemetryCollector_Handler,
		},
		{
			MethodName: "UpdateOpenTelemetryCollector",
			Handler:    _System_UpdateOpenTelemetryCollector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/v1/system.proto",
}
